/*
 * Author's name and email: Michael, michaeljava95@gmail.com
 * Program description: Built the book example using visual IDE tools.
 * Latest version: 6:36 AM, 1/16/2021
 * Older versions: 
 */

import java.awt.Font;

public class CheckBoxFrame extends javax.swing.JFrame
{

	/**
	 * Creates new form CheckBoxFrame
	 */
	public CheckBoxFrame()
	{
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents()
   {

      jTextField1 = new javax.swing.JTextField();
      boldJCheckBox = new javax.swing.JCheckBox();
      italicJCheckBox = new javax.swing.JCheckBox();

      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
      setTitle("JCheckBox Test");

      jTextField1.setColumns(20);
      jTextField1.setFont(new java.awt.Font("Serif", 0, 14)); // NOI18N
      jTextField1.setText("Watch the font style change");

      boldJCheckBox.setText("Bold");
      boldJCheckBox.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            boldJCheckBoxActionPerformed(evt);
         }
      });

      italicJCheckBox.setText("Italic");
      italicJCheckBox.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            italicJCheckBoxActionPerformed(evt);
         }
      });

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGap(50, 50, 50)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
               .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addGroup(layout.createSequentialGroup()
                  .addComponent(boldJCheckBox)
                  .addGap(0, 0, 0)
                  .addComponent(italicJCheckBox)))
            .addContainerGap(50, Short.MAX_VALUE))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGap(20, 20, 20)
            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(boldJCheckBox)
               .addComponent(italicJCheckBox))
            .addContainerGap(20, Short.MAX_VALUE))
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents

   private void boldJCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_boldJCheckBoxActionPerformed
   {//GEN-HEADEREND:event_boldJCheckBoxActionPerformed
		Font font = null; // stores the new Font

		// determine which CheckBoxes are checked and create Font
		if (boldJCheckBox.isSelected() && italicJCheckBox.isSelected())
			font = new Font("Serif", Font.BOLD + Font.ITALIC, 14);
		else if (boldJCheckBox.isSelected())
			font = new Font("Serif", Font.BOLD, 14);
		else if (italicJCheckBox.isSelected())
			font = new Font("Serif", Font.ITALIC, 14);
		else
			font = new Font("Serif", Font.PLAIN, 14);

		jTextField1.setFont(font);
   }//GEN-LAST:event_boldJCheckBoxActionPerformed

   private void italicJCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_italicJCheckBoxActionPerformed
   {//GEN-HEADEREND:event_italicJCheckBoxActionPerformed
		boldJCheckBoxActionPerformed(evt);
   }//GEN-LAST:event_italicJCheckBoxActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[])
	{
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try
		{
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
			{
				if ("Nimbus".equals(info.getName()))
				{
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		}
		catch (ClassNotFoundException ex)
		{
			java.util.logging.Logger.getLogger(CheckBoxFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		catch (InstantiationException ex)
		{
			java.util.logging.Logger.getLogger(CheckBoxFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		catch (IllegalAccessException ex)
		{
			java.util.logging.Logger.getLogger(CheckBoxFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		catch (javax.swing.UnsupportedLookAndFeelException ex)
		{
			java.util.logging.Logger.getLogger(CheckBoxFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable()
		{
			public void run()
			{
				new CheckBoxFrame().setVisible(true);
			}
		});
	}

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JCheckBox boldJCheckBox;
   private javax.swing.JCheckBox italicJCheckBox;
   private javax.swing.JTextField jTextField1;
   // End of variables declaration//GEN-END:variables
}
